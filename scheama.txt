-- Enable UUID extension
create extension if not exists "uuid-ossp";

-- Create users table
create table public.users (
  id uuid references auth.users on delete cascade primary key,
  name text not null,
  email text not null unique,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint proper_email check (email ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$')
);

-- Enable Row Level Security
alter table public.users enable row level security;

-- Create policies
create policy "Users can view their own data" on users
  for select using (auth.uid() = id);

create policy "Users can update their own data" on users
  for update using (auth.uid() = id);

-- Create function to handle new user signup
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, name, email)
  values (
    new.id,
    new.raw_user_meta_data->>'name',
    new.email
  );
  return new;
end;
$$ language plpgsql security definer;

-- Create trigger for new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to update updated_at timestamp
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Create trigger for updated_at
create trigger update_users_updated_at
  before update on users
  for each row execute procedure update_updated_at_column();



-- Drop existing tables if they exist
drop table if exists group_members;
drop table if exists groups;

-- Create groups table with improved structure
create table public.groups (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  description text,
  icon text default 'group',
  color text default '#1a73e8',
  created_by uuid references auth.users(id) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create group_members table with improved structure
create table public.group_members (
  id uuid default uuid_generate_v4() primary key,
  group_id uuid references public.groups(id) on delete cascade not null,
  user_id uuid references auth.users(id) on delete cascade not null,
  role text check (role in ('admin', 'member')) default 'member' not null,
  joined_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint unique_group_member unique(group_id, user_id)
);

-- Enable RLS
alter table public.groups enable row level security;
alter table public.group_members enable row level security;

-- Create updated_at trigger for groups
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

create trigger update_groups_updated_at
  before update on groups
  for each row execute procedure update_updated_at_column();

-- Create trigger to automatically add creator as admin
create or replace function public.handle_new_group()
returns trigger as $$
begin
  insert into public.group_members (group_id, user_id, role)
  values (new.id, new.created_by, 'admin');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_group_created
  after insert on public.groups
  for each row execute procedure public.handle_new_group();

-- Groups Policies
create policy "Enable read access for group members"
  on groups for select
  using (
    exists (
      select 1 from group_members
      where group_id = id
      and user_id = auth.uid()
    )
  );

create policy "Enable insert for authenticated users"
  on groups for insert
  with check (auth.uid() = created_by);

create policy "Enable update for group admins"
  on groups for update
  using (
    exists (
      select 1 from group_members
      where group_id = id
      and user_id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Enable delete for group admins"
  on groups for delete
  using (
    exists (
      select 1 from group_members
      where group_id = id
      and user_id = auth.uid()
      and role = 'admin'
    )
  );

-- Group Members Policies
create policy "Enable read access for all members"
  on group_members for select
  using (
    exists (
      select 1 from group_members gm
      where gm.group_id = group_id
      and gm.user_id = auth.uid()
    )
  );

create policy "Enable insert for group admins"
  on group_members for insert
  with check (
    exists (
      select 1 from group_members
      where group_id = group_members.group_id
      and user_id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Enable update for group admins"
  on group_members for update
  using (
    exists (
      select 1 from group_members
      where group_id = group_members.group_id
      and user_id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Enable delete for admins and self-removal"
  on group_members for delete
  using (
    (exists (
      select 1 from group_members
      where group_id = group_members.group_id
      and user_id = auth.uid()
      and role = 'admin'
    ))
    or user_id = auth.uid()
  );